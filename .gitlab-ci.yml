# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
variables:
  TEST_VAR: "All jobs can use this variable's value"

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

#build-job: # This job runs in the build stage, which runs first.
#  stage: build
#  image: python:3.6
#  script:
#    - echo "Installing Dependencies..."
#    - apt-get -yq update
#    - apt-get -y install python3-pip
#    - python -V # Print out python version for debugging
#    - pip3 install virtualenv
#    - virtualenv venv
#    - source venv/bin/activate
#    - echo "Installing Dependencies..."
#    - pip3 install build
#    - python -m build
#    - echo "Dependencies Installed."

unit-test-job: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  before_script:
    - echo "Installing Dependencies..."
    - apt-get -yq update
    - apt-get -y install python3-pip libgl1 libnss3 libxcomposite1 libxrandr2 libxcursor1 libxi6
    - python -V # Print out python version for debugging
    - pip3 install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - echo "Installing Dependencies..."
    - pip3 install -r dev_requirements.txt
    - echo "Dependencies Installed."
  script:
    - echo "Running unit tests... "
    - python3 -m pytest packetvisualization/tests/models --junitxml=report.xml
    - echo "Test Complete"
  artifacts:
    when: always
    reports:
      junit: report.xml

deploy_production:
  stage: deploy
  variables:
    TWINE_USERNAME: $PRODUCTION_USERNAME
    TWINE_PASSWORD: $PRODUCTION_PASSWORD
  script:
    - echo "Deploying app ... "
    - apt-get -yq update
    - apt-get -y install python3-pip
    - pip3 install --upgrade pip setuptools wheel virtualenv
    - pip3 install twine
    - python3 setup.py sdist bdist_wheel
    - twine upload dist/*
    - echo "App deployed... "
  only:
    - main
